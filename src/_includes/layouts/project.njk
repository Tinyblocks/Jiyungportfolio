---
layout: layouts/base.njk
---
<h1 class="project__title"><a href="/" class="title-back" aria-label="Back to gallery"><svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M15 18l-6-6 6-6"/></svg></a>{{ title }}</h1>
<div class="project__meta">{{ year }} Â· {{ category | capitalize }}</div>

{% if imagesFolder %}
  {% set gallery = imagesFolder | globPaths %}
{% else %}
  {% set gallery = images %}
{% endif %}

<section class="carousel" aria-label="Images">
  <div class="carousel__main">
    <div class="carousel__rail" id="carousel-rail">
      {% for image in gallery %}
      <div class="carousel__item"><img alt="{{ title }} {{ loop.index }}" src="{{ image }}"></div>
      {% endfor %}
    </div>
    <div class="carousel__nav">
      <button class="control" onclick="prevSlide()" aria-label="Previous">
        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M15 18l-6-6 6-6"/></svg>
      </button>
      <button class="control" onclick="nextSlide()" aria-label="Next">
        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M9 6l6 6-6 6"/></svg>
      </button>
    </div>
  </div>
  <div class="carousel__thumbs">
    {% for image in gallery %}
    <div class="thumb{% if loop.first %} active{% endif %}" onclick="goToSlide({{ loop.index0 }})"><img src="{{ image }}" alt="Thumb {{ loop.index }}"></div>
    {% endfor %}
  </div>
</section>

<div class="project__description">
  {{ content | safe }}
</div>

<script>
  const rail = document.getElementById('carousel-rail');
  const thumbs = document.querySelectorAll('.thumb');
  const nav = document.querySelector('.carousel__nav');
  const thumbsContainer = document.querySelector('.carousel__thumbs');

  function slides(){ return Array.from(rail.querySelectorAll('.carousel__item')); }
  (function setup(){
    const s = slides();
    if (s.length <= 1) { nav.classList.add('hidden'); thumbsContainer.classList.add('hidden'); return; }
    const first = s[0].cloneNode(true);
    const last = s[s.length - 1].cloneNode(true);
    rail.appendChild(first);
    rail.insertBefore(last, s[0]);
    // position to first real slide instantly
    requestAnimationFrame(()=>{
      const s2 = slides();
      rail.scrollTo({ left: s2[1].offsetLeft, behavior: 'auto' });
    });
  })();

  let rawIndex = 1; // includes leading clone
  function updateThumbs(realIndex){ thumbs.forEach((t,i)=>t.classList.toggle('active', i===realIndex)); }
  function goToRaw(i, behavior='smooth'){
    const s = slides();
    rawIndex = i;
    const target = s[i];
    if (!target) return;
    rail.scrollTo({ left: target.offsetLeft, behavior });
    const realCount = Math.max(0, s.length - 2);
    const realIndex = Math.min(realCount - 1, Math.max(0, i - 1));
    updateThumbs(realIndex);
  }
  function goToSlide(realIndex){ goToRaw(realIndex + 1, 'smooth'); }
  function nextSlide(){
    const s = slides();
    const lastRealRaw = s.length - 2;
    const onLastReal = rawIndex === lastRealRaw;
    goToRaw(rawIndex + 1, 'smooth');
    if (onLastReal) setTimeout(()=>goToRaw(1, 'auto'), 450);
  }
  function prevSlide(){
    const onFirstReal = rawIndex === 1;
    goToRaw(rawIndex - 1, 'smooth');
    if (onFirstReal) setTimeout(()=>goToRaw(slides().length - 2, 'auto'), 450);
  }
</script>
